package test.java.com.MusicGroup.pagehelper;
import test.java.com.MusicGroup.locators.LocatorReader;
import test.java.com.MusicGroup.util.DriverHelper;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.List;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;

import test.java.com.MusicGroup.locators.LocatorReader;
import test.java.com.MusicGroup.util.DriverHelper;
public class VerifyImageTest_Helper extends DriverHelper {
	private LocatorReader locatorReader;	
	public int invalidImageCount;
	public VerifyImageTest_Helper(WebDriver driver)
	{
		super(driver);
		locatorReader = new LocatorReader("VerifyImageOnProductPage.xml");
	}
	public void ReadExcelFile(String filePath,String fileName,String sheetName, String ImageStatus) throws IOException{
		FileInputStream file = new FileInputStream(new File(filePath+"\\"+fileName));
		System.out.println("File is"+file);
	
		HSSFWorkbook  workbook1 = new HSSFWorkbook(file);
		HSSFSheet sheet = workbook1.getSheetAt(0);
		    int LastRowOFSheet=sheet.getLastRowNum();
		 
		    System.out.println("RowNumber"+LastRowOFSheet);
		    int rowcount=sheet.getLastRowNum()-sheet.getFirstRowNum();
		    for(int i=0;i<=2;i++){
		    	System.out.println("Value of Row is"+i);
		    	Row row=sheet.getRow(i);
		   	 String getURL=row.getCell(0).getStringCellValue();
		   	System.out.println("GetURL"+getURL);
		   	String GetModelName=row.getCell(1).getStringCellValue();
		   	String GetPageType=row.getCell(2).getStringCellValue();
		    	 int LastCols=row.getLastCellNum();
		    	 for(int j=3;j<LastCols;j++){
		    		 
		    	
		    		 String getData=row.getCell(j).getStringCellValue();
		    
		    	 
		    	 System.out.println(getData + "\t\t"+"||");
		    	 System.out.println();
		    	 this.validateInvalidImages(getURL);
	}
		    }
	}
	public void validateInvalidImages(String getURL ) {
		try {
			 
			 driver.navigate().to(getURL);
			 System.out.println("URL is for Navigation"+getURL);
			invalidImageCount = 0;
			List<WebElement> imagesList = driver.findElements(By.tagName("img"));
			System.out.println("Total no. of images are " + imagesList.size());
			for (WebElement imgElement : imagesList) {
				if (imgElement != null) {
					verifyimageActive(imgElement);
				}
			}
			System.out.println("Total no. of invalid images are "	+ invalidImageCount);
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println(e.getMessage());
		}
	}
	public void verifyimageActive(WebElement imgElement) {
		try {
			HttpClient client = HttpClientBuilder.create().build();
			HttpGet request = new HttpGet(imgElement.getAttribute("src"));
			HttpResponse response = client.execute(request);
			// verifying response code he HttpStatus should be 200 if not,
			// increment as invalid images count
			if (response.getStatusLine().getStatusCode() != 200)
				System.out.println("Image is not Present"+imgElement);
				invalidImageCount++;
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}
